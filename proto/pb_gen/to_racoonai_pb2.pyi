"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions
DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Robot_Infos(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ROBOT_ID_FIELD_NUMBER: builtins.int
    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    THETA_FIELD_NUMBER: builtins.int
    DISTANCE_BALL_ROBOT_FIELD_NUMBER: builtins.int
    RADIAN_BALL_ROBOT_FIELD_NUMBER: builtins.int
    DIFF_X_FIELD_NUMBER: builtins.int
    DIFF_Y_FIELD_NUMBER: builtins.int
    DIFF_THETA_FIELD_NUMBER: builtins.int
    SPEED_FIELD_NUMBER: builtins.int
    SLOPE_FIELD_NUMBER: builtins.int
    INTERCEPT_FIELD_NUMBER: builtins.int
    ANGULAR_VELOCITY_FIELD_NUMBER: builtins.int
    VISIBLE_FIELD_NUMBER: builtins.int
    BALL_CATCH_FIELD_NUMBER: builtins.int
    ONLINE_FIELD_NUMBER: builtins.int
    BATTERY_VOLTAGE_FIELD_NUMBER: builtins.int
    robot_id: builtins.int = ...
    x: builtins.float = ...
    y: builtins.float = ...
    theta: builtins.float = ...
    distance_ball_robot: builtins.float = ...
    radian_ball_robot: builtins.float = ...
    diff_x: builtins.float = ...
    diff_y: builtins.float = ...
    diff_theta: builtins.float = ...
    speed: builtins.float = ...
    slope: builtins.float = ...
    intercept: builtins.float = ...
    angular_velocity: builtins.float = ...
    visible: builtins.bool = ...
    ball_catch: builtins.bool = ...
    online: builtins.bool = ...
    battery_voltage: builtins.float = ...

    def __init__(self, *, robot_id: typing.Optional[builtins.int]=..., x: typing.Optional[builtins.float]=..., y: typing.Optional[builtins.float]=..., theta: typing.Optional[builtins.float]=..., distance_ball_robot: typing.Optional[builtins.float]=..., radian_ball_robot: typing.Optional[builtins.float]=..., diff_x: typing.Optional[builtins.float]=..., diff_y: typing.Optional[builtins.float]=..., diff_theta: typing.Optional[builtins.float]=..., speed: typing.Optional[builtins.float]=..., slope: typing.Optional[builtins.float]=..., intercept: typing.Optional[builtins.float]=..., angular_velocity: typing.Optional[builtins.float]=..., visible: typing.Optional[builtins.bool]=..., ball_catch: typing.Optional[builtins.bool]=..., online: typing.Optional[builtins.bool]=..., battery_voltage: typing.Optional[builtins.float]=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['angular_velocity', b'angular_velocity', 'ball_catch', b'ball_catch', 'battery_voltage', b'battery_voltage', 'diff_theta', b'diff_theta', 'diff_x', b'diff_x', 'diff_y', b'diff_y', 'distance_ball_robot', b'distance_ball_robot', 'intercept', b'intercept', 'online', b'online', 'radian_ball_robot', b'radian_ball_robot', 'robot_id', b'robot_id', 'slope', b'slope', 'speed', b'speed', 'theta', b'theta', 'visible', b'visible', 'x', b'x', 'y', b'y']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['angular_velocity', b'angular_velocity', 'ball_catch', b'ball_catch', 'battery_voltage', b'battery_voltage', 'diff_theta', b'diff_theta', 'diff_x', b'diff_x', 'diff_y', b'diff_y', 'distance_ball_robot', b'distance_ball_robot', 'intercept', b'intercept', 'online', b'online', 'radian_ball_robot', b'radian_ball_robot', 'robot_id', b'robot_id', 'slope', b'slope', 'speed', b'speed', 'theta', b'theta', 'visible', b'visible', 'x', b'x', 'y', b'y']) -> None:
        ...
global___Robot_Infos = Robot_Infos

class Ball_Info(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FILTERED_X_FIELD_NUMBER: builtins.int
    FILTERED_Y_FIELD_NUMBER: builtins.int
    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    Z_FIELD_NUMBER: builtins.int
    DIFF_X_FIELD_NUMBER: builtins.int
    DIFF_Y_FIELD_NUMBER: builtins.int
    SLOPE_RADIAN_FIELD_NUMBER: builtins.int
    INTERCEPT_FIELD_NUMBER: builtins.int
    SPEED_FIELD_NUMBER: builtins.int
    SLOPE_FIELD_NUMBER: builtins.int
    filtered_x: builtins.float = ...
    filtered_y: builtins.float = ...
    x: builtins.float = ...
    y: builtins.float = ...
    z: builtins.float = ...
    diff_x: builtins.float = ...
    diff_y: builtins.float = ...
    slope_radian: builtins.float = ...
    intercept: builtins.float = ...
    speed: builtins.float = ...
    slope: builtins.float = ...

    def __init__(self, *, filtered_x: typing.Optional[builtins.float]=..., filtered_y: typing.Optional[builtins.float]=..., x: typing.Optional[builtins.float]=..., y: typing.Optional[builtins.float]=..., z: typing.Optional[builtins.float]=..., diff_x: typing.Optional[builtins.float]=..., diff_y: typing.Optional[builtins.float]=..., slope_radian: typing.Optional[builtins.float]=..., intercept: typing.Optional[builtins.float]=..., speed: typing.Optional[builtins.float]=..., slope: typing.Optional[builtins.float]=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['diff_x', b'diff_x', 'diff_y', b'diff_y', 'filtered_x', b'filtered_x', 'filtered_y', b'filtered_y', 'intercept', b'intercept', 'slope', b'slope', 'slope_radian', b'slope_radian', 'speed', b'speed', 'x', b'x', 'y', b'y', 'z', b'z']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['diff_x', b'diff_x', 'diff_y', b'diff_y', 'filtered_x', b'filtered_x', 'filtered_y', b'filtered_y', 'intercept', b'intercept', 'slope', b'slope', 'slope_radian', b'slope_radian', 'speed', b'speed', 'x', b'x', 'y', b'y', 'z', b'z']) -> None:
        ...
global___Ball_Info = Ball_Info

class Geometry_Info(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FIELD_LENGTH_FIELD_NUMBER: builtins.int
    FIELD_WIDTH_FIELD_NUMBER: builtins.int
    GOAL_WIDTH_FIELD_NUMBER: builtins.int
    GOAL_DEPTH_FIELD_NUMBER: builtins.int
    BOUNDARY_WIDTH_FIELD_NUMBER: builtins.int
    PENALTY_AREA_DEPTH_FIELD_NUMBER: builtins.int
    PENALTY_AREA_WIDTH_FIELD_NUMBER: builtins.int
    CENTER_CIRCLE_RADIUS_FIELD_NUMBER: builtins.int
    LINE_THICKNESS_FIELD_NUMBER: builtins.int
    GOAL_CENTER_TO_PENALTY_MARK_FIELD_NUMBER: builtins.int
    GOAL_HEIGHT_FIELD_NUMBER: builtins.int
    BALL_RADIUS_FIELD_NUMBER: builtins.int
    MAX_ROBOT_RADIUS_FIELD_NUMBER: builtins.int
    GOAL_X_FIELD_NUMBER: builtins.int
    GOAL_Y_FIELD_NUMBER: builtins.int
    field_length: builtins.int = ...
    'Field length (distance between goal lines) in mm'
    field_width: builtins.int = ...
    'Field width (distance between touch lines) in mm'
    goal_width: builtins.int = ...
    'Goal width (distance between inner edges of goal posts) in mm'
    goal_depth: builtins.int = ...
    'Goal depth (distance from outer goal line edge to inner goal back) in mm'
    boundary_width: builtins.int = ...
    'Boundary width (distance from touch/goal line centers to boundary walls) in mm'
    penalty_area_depth: builtins.int = ...
    'Depth of the penalty/defense area (measured between line centers) in mm'
    penalty_area_width: builtins.int = ...
    'Width of the penalty/defense area (measured between line centers) in mm'
    center_circle_radius: builtins.int = ...
    'Radius of the center circle (measured between line centers) in mm'
    line_thickness: builtins.int = ...
    'Thickness/width of the lines on the field in mm'
    goal_center_to_penalty_mark: builtins.int = ...
    'Distance between the goal center and the center of the penalty mark in mm'
    goal_height: builtins.int = ...
    'Goal height in mm'
    ball_radius: builtins.float = ...
    'Ball radius in mm (note that this is a float type to represent sub-mm precision)'
    max_robot_radius: builtins.float = ...
    'Max allowed robot radius in mm (note that this is a float type to represent sub-mm precision)'
    goal_x: builtins.float = ...
    goal_y: builtins.float = ...

    def __init__(self, *, field_length: typing.Optional[builtins.int]=..., field_width: typing.Optional[builtins.int]=..., goal_width: typing.Optional[builtins.int]=..., goal_depth: typing.Optional[builtins.int]=..., boundary_width: typing.Optional[builtins.int]=..., penalty_area_depth: typing.Optional[builtins.int]=..., penalty_area_width: typing.Optional[builtins.int]=..., center_circle_radius: typing.Optional[builtins.int]=..., line_thickness: typing.Optional[builtins.int]=..., goal_center_to_penalty_mark: typing.Optional[builtins.int]=..., goal_height: typing.Optional[builtins.int]=..., ball_radius: typing.Optional[builtins.float]=..., max_robot_radius: typing.Optional[builtins.float]=..., goal_x: typing.Optional[builtins.float]=..., goal_y: typing.Optional[builtins.float]=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['ball_radius', b'ball_radius', 'boundary_width', b'boundary_width', 'center_circle_radius', b'center_circle_radius', 'field_length', b'field_length', 'field_width', b'field_width', 'goal_center_to_penalty_mark', b'goal_center_to_penalty_mark', 'goal_depth', b'goal_depth', 'goal_height', b'goal_height', 'goal_width', b'goal_width', 'goal_x', b'goal_x', 'goal_y', b'goal_y', 'line_thickness', b'line_thickness', 'max_robot_radius', b'max_robot_radius', 'penalty_area_depth', b'penalty_area_depth', 'penalty_area_width', b'penalty_area_width']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['ball_radius', b'ball_radius', 'boundary_width', b'boundary_width', 'center_circle_radius', b'center_circle_radius', 'field_length', b'field_length', 'field_width', b'field_width', 'goal_center_to_penalty_mark', b'goal_center_to_penalty_mark', 'goal_depth', b'goal_depth', 'goal_height', b'goal_height', 'goal_width', b'goal_width', 'goal_x', b'goal_x', 'goal_y', b'goal_y', 'line_thickness', b'line_thickness', 'max_robot_radius', b'max_robot_radius', 'penalty_area_depth', b'penalty_area_depth', 'penalty_area_width', b'penalty_area_width']) -> None:
        ...
global___Geometry_Info = Geometry_Info

class Referee_Info(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...

    class _Command:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _CommandEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Command.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        HALT: Referee_Info.Command.ValueType = ...
        'All robots should completely stop moving.'
        STOP: Referee_Info.Command.ValueType = ...
        'Robots must keep 50 cm from the ball.'
        NORMAL_START: Referee_Info.Command.ValueType = ...
        'A prepared kickoff or penalty may now be taken.'
        FORCE_START: Referee_Info.Command.ValueType = ...
        'The ball is dropped and free for either team.'
        PREPARE_KICKOFF_YELLOW: Referee_Info.Command.ValueType = ...
        'The yellow team may move into kickoff position.'
        PREPARE_KICKOFF_BLUE: Referee_Info.Command.ValueType = ...
        'The blue team may move into kickoff position.'
        PREPARE_PENALTY_YELLOW: Referee_Info.Command.ValueType = ...
        'The yellow team may move into penalty position.'
        PREPARE_PENALTY_BLUE: Referee_Info.Command.ValueType = ...
        'The blue team may move into penalty position.'
        DIRECT_FREE_YELLOW: Referee_Info.Command.ValueType = ...
        'The yellow team may take a direct free kick.'
        DIRECT_FREE_BLUE: Referee_Info.Command.ValueType = ...
        'The blue team may take a direct free kick.'
        INDIRECT_FREE_YELLOW: Referee_Info.Command.ValueType = ...
        'The yellow team may take an indirect free kick.'
        INDIRECT_FREE_BLUE: Referee_Info.Command.ValueType = ...
        'The blue team may take an indirect free kick.'
        TIMEOUT_YELLOW: Referee_Info.Command.ValueType = ...
        'The yellow team is currently in a timeout.'
        TIMEOUT_BLUE: Referee_Info.Command.ValueType = ...
        'The blue team is currently in a timeout.'
        GOAL_YELLOW: Referee_Info.Command.ValueType = ...
        'The yellow team just scored a goal.\n        For information only.\n        For rules compliance, teams must treat as STOP.\n        Deprecated: Use the score field from the team infos instead. That way, you can also detect revoked goals.\n        '
        GOAL_BLUE: Referee_Info.Command.ValueType = ...
        'The blue team just scored a goal. See also GOAL_YELLOW.'
        BALL_PLACEMENT_YELLOW: Referee_Info.Command.ValueType = ...
        'Equivalent to STOP, but the yellow team must pick up the ball and\n        drop it in the Designated Position.\n        '
        BALL_PLACEMENT_BLUE: Referee_Info.Command.ValueType = ...
        'Equivalent to STOP, but the blue team must pick up the ball and drop\n        it in the Designated Position.\n        '

    class Command(_Command, metaclass=_CommandEnumTypeWrapper):
        """These are the "fine" states of play on the field."""
        pass
    HALT: Referee_Info.Command.ValueType = ...
    'All robots should completely stop moving.'
    STOP: Referee_Info.Command.ValueType = ...
    'Robots must keep 50 cm from the ball.'
    NORMAL_START: Referee_Info.Command.ValueType = ...
    'A prepared kickoff or penalty may now be taken.'
    FORCE_START: Referee_Info.Command.ValueType = ...
    'The ball is dropped and free for either team.'
    PREPARE_KICKOFF_YELLOW: Referee_Info.Command.ValueType = ...
    'The yellow team may move into kickoff position.'
    PREPARE_KICKOFF_BLUE: Referee_Info.Command.ValueType = ...
    'The blue team may move into kickoff position.'
    PREPARE_PENALTY_YELLOW: Referee_Info.Command.ValueType = ...
    'The yellow team may move into penalty position.'
    PREPARE_PENALTY_BLUE: Referee_Info.Command.ValueType = ...
    'The blue team may move into penalty position.'
    DIRECT_FREE_YELLOW: Referee_Info.Command.ValueType = ...
    'The yellow team may take a direct free kick.'
    DIRECT_FREE_BLUE: Referee_Info.Command.ValueType = ...
    'The blue team may take a direct free kick.'
    INDIRECT_FREE_YELLOW: Referee_Info.Command.ValueType = ...
    'The yellow team may take an indirect free kick.'
    INDIRECT_FREE_BLUE: Referee_Info.Command.ValueType = ...
    'The blue team may take an indirect free kick.'
    TIMEOUT_YELLOW: Referee_Info.Command.ValueType = ...
    'The yellow team is currently in a timeout.'
    TIMEOUT_BLUE: Referee_Info.Command.ValueType = ...
    'The blue team is currently in a timeout.'
    GOAL_YELLOW: Referee_Info.Command.ValueType = ...
    'The yellow team just scored a goal.\n    For information only.\n    For rules compliance, teams must treat as STOP.\n    Deprecated: Use the score field from the team infos instead. That way, you can also detect revoked goals.\n    '
    GOAL_BLUE: Referee_Info.Command.ValueType = ...
    'The blue team just scored a goal. See also GOAL_YELLOW.'
    BALL_PLACEMENT_YELLOW: Referee_Info.Command.ValueType = ...
    'Equivalent to STOP, but the yellow team must pick up the ball and\n    drop it in the Designated Position.\n    '
    BALL_PLACEMENT_BLUE: Referee_Info.Command.ValueType = ...
    'Equivalent to STOP, but the blue team must pick up the ball and drop\n    it in the Designated Position.\n    '

    class _Stage:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _StageEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Stage.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        NORMAL_FIRST_HALF_PRE: Referee_Info.Stage.ValueType = ...
        'The first half is about to start.\n        A kickoff is called within this stage.\n        This stage ends with the NORMAL_START.\n        '
        NORMAL_FIRST_HALF: Referee_Info.Stage.ValueType = ...
        'The first half of the normal game, before half time.'
        NORMAL_HALF_TIME: Referee_Info.Stage.ValueType = ...
        'Half time between first and second halves.'
        NORMAL_SECOND_HALF_PRE: Referee_Info.Stage.ValueType = ...
        'The second half is about to start.\n        A kickoff is called within this stage.\n        This stage ends with the NORMAL_START.\n        '
        NORMAL_SECOND_HALF: Referee_Info.Stage.ValueType = ...
        'The second half of the normal game, after half time.'
        EXTRA_TIME_BREAK: Referee_Info.Stage.ValueType = ...
        'The break before extra time.'
        EXTRA_FIRST_HALF_PRE: Referee_Info.Stage.ValueType = ...
        'The first half of extra time is about to start.\n        A kickoff is called within this stage.\n        This stage ends with the NORMAL_START.\n        '
        EXTRA_FIRST_HALF: Referee_Info.Stage.ValueType = ...
        'The first half of extra time.'
        EXTRA_HALF_TIME: Referee_Info.Stage.ValueType = ...
        'Half time between first and second extra halves.'
        EXTRA_SECOND_HALF_PRE: Referee_Info.Stage.ValueType = ...
        'The second half of extra time is about to start.\n        A kickoff is called within this stage.\n        This stage ends with the NORMAL_START.\n        '
        EXTRA_SECOND_HALF: Referee_Info.Stage.ValueType = ...
        'The second half of extra time.'
        PENALTY_SHOOTOUT_BREAK: Referee_Info.Stage.ValueType = ...
        'The break before penalty shootout.'
        PENALTY_SHOOTOUT: Referee_Info.Stage.ValueType = ...
        'The penalty shootout.'
        POST_GAME: Referee_Info.Stage.ValueType = ...
        'The game is over.'

    class Stage(_Stage, metaclass=_StageEnumTypeWrapper):
        """These are the "coarse" stages of the game."""
        pass
    NORMAL_FIRST_HALF_PRE: Referee_Info.Stage.ValueType = ...
    'The first half is about to start.\n    A kickoff is called within this stage.\n    This stage ends with the NORMAL_START.\n    '
    NORMAL_FIRST_HALF: Referee_Info.Stage.ValueType = ...
    'The first half of the normal game, before half time.'
    NORMAL_HALF_TIME: Referee_Info.Stage.ValueType = ...
    'Half time between first and second halves.'
    NORMAL_SECOND_HALF_PRE: Referee_Info.Stage.ValueType = ...
    'The second half is about to start.\n    A kickoff is called within this stage.\n    This stage ends with the NORMAL_START.\n    '
    NORMAL_SECOND_HALF: Referee_Info.Stage.ValueType = ...
    'The second half of the normal game, after half time.'
    EXTRA_TIME_BREAK: Referee_Info.Stage.ValueType = ...
    'The break before extra time.'
    EXTRA_FIRST_HALF_PRE: Referee_Info.Stage.ValueType = ...
    'The first half of extra time is about to start.\n    A kickoff is called within this stage.\n    This stage ends with the NORMAL_START.\n    '
    EXTRA_FIRST_HALF: Referee_Info.Stage.ValueType = ...
    'The first half of extra time.'
    EXTRA_HALF_TIME: Referee_Info.Stage.ValueType = ...
    'Half time between first and second extra halves.'
    EXTRA_SECOND_HALF_PRE: Referee_Info.Stage.ValueType = ...
    'The second half of extra time is about to start.\n    A kickoff is called within this stage.\n    This stage ends with the NORMAL_START.\n    '
    EXTRA_SECOND_HALF: Referee_Info.Stage.ValueType = ...
    'The second half of extra time.'
    PENALTY_SHOOTOUT_BREAK: Referee_Info.Stage.ValueType = ...
    'The break before penalty shootout.'
    PENALTY_SHOOTOUT: Referee_Info.Stage.ValueType = ...
    'The penalty shootout.'
    POST_GAME: Referee_Info.Stage.ValueType = ...
    'The game is over.'
    COMMAND_FIELD_NUMBER: builtins.int
    STAGE_FIELD_NUMBER: builtins.int
    YELLOW_CARDS_FIELD_NUMBER: builtins.int
    RED_CARDS_FIELD_NUMBER: builtins.int
    PRE_COMMAND_FIELD_NUMBER: builtins.int
    NEXT_COMMAND_FIELD_NUMBER: builtins.int
    BALL_PLACEMENT_X_FIELD_NUMBER: builtins.int
    BALL_PLACEMENT_Y_FIELD_NUMBER: builtins.int
    command: global___Referee_Info.Command.ValueType = ...
    stage: global___Referee_Info.Stage.ValueType = ...
    yellow_cards: builtins.int = ...
    red_cards: builtins.int = ...
    pre_command: global___Referee_Info.Command.ValueType = ...
    next_command: global___Referee_Info.Command.ValueType = ...
    ball_placement_x: builtins.float = ...
    ball_placement_y: builtins.float = ...

    def __init__(self, *, command: typing.Optional[global___Referee_Info.Command.ValueType]=..., stage: typing.Optional[global___Referee_Info.Stage.ValueType]=..., yellow_cards: typing.Optional[builtins.int]=..., red_cards: typing.Optional[builtins.int]=..., pre_command: typing.Optional[global___Referee_Info.Command.ValueType]=..., next_command: typing.Optional[global___Referee_Info.Command.ValueType]=..., ball_placement_x: typing.Optional[builtins.float]=..., ball_placement_y: typing.Optional[builtins.float]=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['ball_placement_x', b'ball_placement_x', 'ball_placement_y', b'ball_placement_y', 'command', b'command', 'next_command', b'next_command', 'pre_command', b'pre_command', 'red_cards', b'red_cards', 'stage', b'stage', 'yellow_cards', b'yellow_cards']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['ball_placement_x', b'ball_placement_x', 'ball_placement_y', b'ball_placement_y', 'command', b'command', 'next_command', b'next_command', 'pre_command', b'pre_command', 'red_cards', b'red_cards', 'stage', b'stage', 'yellow_cards', b'yellow_cards']) -> None:
        ...
global___Referee_Info = Referee_Info

class Other_Infos(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NUM_OF_CAMERAS_FIELD_NUMBER: builtins.int
    NUM_OF_OUR_ROBOTS_FIELD_NUMBER: builtins.int
    NUM_OF_ENEMY_ROBOTS_FIELD_NUMBER: builtins.int
    SECPERFRAME_FIELD_NUMBER: builtins.int
    IS_VISION_RECV_FIELD_NUMBER: builtins.int
    ATTACK_DIRECTION_FIELD_NUMBER: builtins.int
    num_of_cameras: builtins.int = ...
    num_of_our_robots: builtins.int = ...
    num_of_enemy_robots: builtins.int = ...
    secperframe: builtins.float = ...
    is_vision_recv: builtins.bool = ...
    attack_direction: builtins.int = ...

    def __init__(self, *, num_of_cameras: typing.Optional[builtins.int]=..., num_of_our_robots: typing.Optional[builtins.int]=..., num_of_enemy_robots: typing.Optional[builtins.int]=..., secperframe: typing.Optional[builtins.float]=..., is_vision_recv: typing.Optional[builtins.bool]=..., attack_direction: typing.Optional[builtins.int]=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['attack_direction', b'attack_direction', 'is_vision_recv', b'is_vision_recv', 'num_of_cameras', b'num_of_cameras', 'num_of_enemy_robots', b'num_of_enemy_robots', 'num_of_our_robots', b'num_of_our_robots', 'secperframe', b'secperframe']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['attack_direction', b'attack_direction', 'is_vision_recv', b'is_vision_recv', 'num_of_cameras', b'num_of_cameras', 'num_of_enemy_robots', b'num_of_enemy_robots', 'num_of_our_robots', b'num_of_our_robots', 'secperframe', b'secperframe']) -> None:
        ...
global___Other_Infos = Other_Infos

class RacoonMW_Packet(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    OUR_ROBOTS_FIELD_NUMBER: builtins.int
    ENEMY_ROBOTS_FIELD_NUMBER: builtins.int
    GEOMETRY_FIELD_NUMBER: builtins.int
    BALL_FIELD_NUMBER: builtins.int
    REFEREE_FIELD_NUMBER: builtins.int
    INFO_FIELD_NUMBER: builtins.int

    @property
    def our_robots(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Robot_Infos]:
        ...

    @property
    def enemy_robots(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Robot_Infos]:
        ...

    @property
    def geometry(self) -> global___Geometry_Info:
        ...

    @property
    def ball(self) -> global___Ball_Info:
        ...

    @property
    def referee(self) -> global___Referee_Info:
        ...

    @property
    def info(self) -> global___Other_Infos:
        ...

    def __init__(self, *, our_robots: typing.Optional[typing.Iterable[global___Robot_Infos]]=..., enemy_robots: typing.Optional[typing.Iterable[global___Robot_Infos]]=..., geometry: typing.Optional[global___Geometry_Info]=..., ball: typing.Optional[global___Ball_Info]=..., referee: typing.Optional[global___Referee_Info]=..., info: typing.Optional[global___Other_Infos]=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['ball', b'ball', 'geometry', b'geometry', 'info', b'info', 'referee', b'referee']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['ball', b'ball', 'enemy_robots', b'enemy_robots', 'geometry', b'geometry', 'info', b'info', 'our_robots', b'our_robots', 'referee', b'referee']) -> None:
        ...
global___RacoonMW_Packet = RacoonMW_Packet